<?php

require_once 'vendor/autoload.php';

echo "=== TEST LIANLIAN KEYS (SIMPLE) ===\n\n";

// Load environment variables
$merchantId = getenv('LIANLIAN_MERCHANT_ID') ?: '';
$privateKey = getenv('LIANLIAN_PRIVATE_KEY') ?: '';
$publicKey = getenv('LIANLIAN_PUBLIC_KEY') ?: '';

echo "1. üìã TH√îNG TIN KEYS:\n";
echo "   - Merchant ID: " . ($merchantId ?: 'KH√îNG C√ì') . "\n";
echo "   - Private Key: " . (strlen($privateKey) > 0 ? 'C√ì (' . strlen($privateKey) . ' k√Ω t·ª±)' : 'KH√îNG C√ì') . "\n";
echo "   - Public Key: " . (strlen($publicKey) > 0 ? 'C√ì (' . strlen($publicKey) . ' k√Ω t·ª±)' : 'KH√îNG C√ì') . "\n\n";

if (empty($privateKey) || empty($publicKey)) {
    echo "‚ùå KEYS CH∆ØA ƒê∆Ø·ª¢C C·∫§U H√åNH!\n";
    echo "üí° C·∫ßn c·∫≠p nh·∫≠t file .env v·ªõi keys t·ª´ LianLianPay\n";
    exit;
}

echo "2. üîç KI·ªÇM TRA FORMAT KEYS:\n";

// Ki·ªÉm tra private key
$privateKeyPreview = substr($privateKey, 0, 50) . '...';
echo "   - Private Key Preview: $privateKeyPreview\n";

// Ki·ªÉm tra public key  
$publicKeyPreview = substr($publicKey, 0, 50) . '...';
echo "   - Public Key Preview: $publicKeyPreview\n";

// Ki·ªÉm tra c√≥ headers kh√¥ng
$privateHasHeaders = strpos($privateKey, '-----BEGIN') !== false;
$publicHasHeaders = strpos($publicKey, '-----BEGIN') !== false;

echo "   - Private Key c√≥ headers: " . ($privateHasHeaders ? 'C√ì' : 'KH√îNG') . "\n";
echo "   - Public Key c√≥ headers: " . ($publicHasHeaders ? 'C√ì' : 'KH√îNG') . "\n";

if ($privateHasHeaders || $publicHasHeaders) {
    echo "   ‚ö†Ô∏è  Keys c√≥ headers - LianLianPay kh√¥ng c·∫ßn headers\n";
    echo "   üí° Ch·ªâ c·∫ßn key content thu·∫ßn t√∫y\n";
}

echo "\n3. üß™ TEST SIGNATURE V·ªöI LIANLIAN SDK:\n";

try {
    $signTool = new \lianlianpay\v3sdk\utils\LianLianSign();

    // Test data ƒë∆°n gi·∫£n
    $testData = [
        'merchant_id' => $merchantId,
        'biz_code' => 'EC',
        'country' => 'US'
    ];

    echo "   - Test data: " . json_encode($testData) . "\n";

    // Test signature generation
    $signature = $signTool->sign($testData, $privateKey);
    echo "   - Signature generated: " . (strlen($signature) > 0 ? 'C√ì' : 'KH√îNG') . "\n";
    echo "   - Signature length: " . strlen($signature) . "\n";

    if (strlen($signature) > 0) {
        // Test verification
        $isValid = $signTool->verify($testData, $signature, $publicKey);
        echo "   - Signature verification: " . ($isValid ? '‚úÖ VALID' : '‚ùå INVALID') . "\n";

        if ($isValid) {
            echo "   üéâ KEYS HO·∫†T ƒê·ªòNG ƒê√öNG!\n";
            echo "   üéâ KEYS HO·∫†T ƒê·ªòNG ƒê√öNG!\n";
            echo "   üéâ KEYS HO·∫†T ƒê·ªòNG ƒê√öNG!\n";
        } else {
            echo "   ‚ùå KEYS KH√îNG MATCH!\n";
            echo "   üí° C·∫ßn ki·ªÉm tra l·∫°i keys t·ª´ LianLianPay\n";
        }
    } else {
        echo "   ‚ùå Kh√¥ng th·ªÉ t·∫°o signature\n";
    }
} catch (Exception $e) {
    echo "   ‚ùå L·ªói: " . $e->getMessage() . "\n";
}

echo "\n4. üìù H∆Ø·ªöNG D·∫™N C·∫¨P NH·∫¨T .ENV:\n";
echo "   Format ƒë√∫ng cho .env:\n";
echo "   LIANLIAN_MERCHANT_ID=your_merchant_id\n";
echo "   LIANLIAN_PUBLIC_KEY=your_public_key_content_only\n";
echo "   LIANLIAN_PRIVATE_KEY=your_private_key_content_only\n";
echo "   \n";
echo "   ‚ö†Ô∏è  L∆ØU √ù:\n";
echo "   - Ch·ªâ c·∫ßn key content, kh√¥ng c·∫ßn headers\n";
echo "   - Kh√¥ng c·∫ßn -----BEGIN RSA PRIVATE KEY-----\n";
echo "   - Kh√¥ng c·∫ßn -----END RSA PRIVATE KEY-----\n";
echo "   - Ch·ªâ c·∫ßn n·ªôi dung key thu·∫ßn t√∫y\n";

echo "\n=== HO√ÄN TH√ÄNH ===\n";
